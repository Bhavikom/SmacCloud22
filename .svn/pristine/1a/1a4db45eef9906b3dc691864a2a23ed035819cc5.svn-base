package in.ssoft.salescloud.adapter;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.RequiresApi;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentTransaction;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.request.animation.GlideAnimation;
import com.bumptech.glide.request.target.SimpleTarget;
import com.google.gson.Gson;

import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.TimeZone;

import in.ssoft.salescloud.R;
import in.ssoft.salescloud.base.Activity;
import in.ssoft.salescloud.base.Helper;
import in.ssoft.salescloud.base.NetworkRequest;
import in.ssoft.salescloud.base.NetworkResponse;
import in.ssoft.salescloud.base.NetworkService;
import in.ssoft.salescloud.base.RequestParameter;
import in.ssoft.salescloud.data.DataHelper;
import in.ssoft.salescloud.fragment.MediaFragment;
import in.ssoft.salescloud.fragment.ShowdownloadProcessFragment;
import in.ssoft.salescloud.helper.DataProvider;
import in.ssoft.salescloud.helper.PreferenceHelper;
import in.ssoft.salescloud.model.Media;
import in.ssoft.salescloud.service.DownloadFileFromURL;
import in.ssoft.salescloud.widgets.UserCommentDialog;

import static in.ssoft.salescloud.base.NetworkService.KEY_AUTHORIZATION;

/**
 * This class are use to show medias, It can also user to perform media related operations
 */
public class MediaAdapter extends RecyclerView.Adapter<MediaAdapter.MediaHolder> implements DownloadFileFromURL.interfaceAsyncResponse, View.OnClickListener
{

    private static final String FILETYPE_VIDEO = "video";
    private static final String FILETYPE_VIDEO_MP4 = "video/mp4";
    private static final String FILETYPE_IMAGE = "image";
    private static final String FILETYPE_FOLDER = "folder";
    private static final String FILETYPE_PDF = "application/pdf";
    public InterfaceClickMedial intefaceClick;
    public ProgressDialog dialog;
    public Boolean checkLike;
    FragmentTransaction transaction;
    OnItemClickOfAdapter onItemClickOfAdapter;
    UserCommentDialog commentDialog;
    DownloadFileFromURL.interfaceAsyncResponse interfaceResponse = null;
    boolean isTabletSize;
    long blockSize = 0;
    private Activity activity;
    private LayoutInflater inflater;
    private ArrayList<Media> mediaList;
    private boolean isGrid;
    private OnClickListener clickListener;

    public MediaAdapter(Activity activity, ArrayList<Media> mediaList, OnItemClickOfAdapter interfaceAdapter)
    {
        this.activity = activity;
        this.mediaList = mediaList;
        this.inflater = LayoutInflater.from(this.activity);
        this.interfaceResponse = this;
        this.dialog = new ProgressDialog(activity);
        this.dialog.setCancelable(false);
        this.onItemClickOfAdapter = interfaceAdapter;
        transaction = ((FragmentActivity) activity).getSupportFragmentManager().beginTransaction();
        //fragmentManager = getSupportFragmentManager();
    }

    public void updateData(ArrayList<Media> mediaList)
    {
        this.mediaList.clear();
        this.mediaList.addAll(mediaList);
        notifyDataSetChanged();
    }

    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
    @Override
    public MediaHolder onCreateViewHolder(ViewGroup parent, int viewType)
    {
        View rootView = inflater.inflate(isGrid ? R.layout.partial_media_item_grid : R.layout.partial_media_iteam_list, parent, false);

        return new MediaHolder(rootView);

    }

    public void setGrid(boolean isGrid)
    {
        this.isGrid = isGrid;
        notifyDataSetChanged();
    }

    public void setClickListener(OnClickListener mClickListener)
    {
        this.clickListener = mClickListener;
        notifyDataSetChanged();
    }

    @Override
    public void onBindViewHolder(final MediaHolder holder, final int position)
    {
        final int finalPosition = position;
        final Media media = mediaList.get(finalPosition);
        holder.layout_parent_border.setBackgroundColor(Color.TRANSPARENT);
        holder.frameLayout_media_thumbnail.setBackgroundColor(Color.TRANSPARENT);
        holder.labelName.setText(media.name);
        holder.labelName.setTypeface(Helper.robotoMediumTypeface);
        holder.textFileSize.setTypeface(Helper.robotoLightTypeface);
        isTabletSize = activity.getResources().getBoolean(R.bool.isTablet);
        LinearLayout.LayoutParams imageLayoutParams = (LinearLayout.LayoutParams) holder.imageIcon.getLayoutParams();
        if (activity.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
            if (Helper.isTablet(activity)) {
                imageLayoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, Helper.getDeviceHeight(activity) / 4);
            } else {
                imageLayoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, Helper.getDeviceHeight(activity) / 3);
            }
        } else {
            if (Helper.isTablet(activity)) {
                imageLayoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, Helper.getDeviceHeight(activity) / 3);
            } else {
                imageLayoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, Helper.getDeviceHeight(activity) / 3);
            }

        }


        imageLayoutParams.setMargins(1, 1, 1, 1);
        holder.imageIcon.setLayoutParams(imageLayoutParams);
        holder.textFileSize.setText(String.valueOf(android.text.format.Formatter.formatFileSize(activity, media.size)));
        checkLike = DataHelper.checkLike(activity, media.id, PreferenceHelper.getUserContext(activity));

        //if (media.likeCount > 0)
        if (checkLike)
        {
            holder.imgRate.setImageResource(R.drawable.ic_star_white);
        }
        else
        {
            holder.imgRate.setImageResource(R.drawable.ic_star);
        }
        int channelId = DataHelper.getChannelId(activity, media.id);

        /*int countMedia = DataHelper.getCountMediaFromChannelId(activity, channelId);
        holder.txtMediaCount.setText(String.valueOf(countMedia) + " " + activity.getString(R.string.label_medias));*/
        if (media.type.equalsIgnoreCase(FILETYPE_FOLDER))
        {
            holder.relativeOption.setVisibility(View.GONE);
            holder.linearMediaCount.setVisibility(View.GONE);
        }
        else
        {
            holder.relativeOption.setVisibility(View.VISIBLE);
            holder.linearMediaCount.setVisibility(View.GONE);
        }
        holder.imgRate.setOnClickListener(new View.OnClickListener()
        {
            @Override
            public void onClick(View v)
            {
                if (media.isDownloaded == 0)
                {

                    Helper.showSimpleDialog(activity, activity.getString(R.string.label_download_first_dialog));

                }
                else
                {
                    onItemClickOfAdapter.onItemClick(4, position);
                }

            }
        });
        holder.imgShare.setOnClickListener(new View.OnClickListener()
        {
            @Override
            public void onClick(View v)
            {
                onItemClickOfAdapter.onItemClick(2, position);
            }
        });
        holder.imgInfo.setOnClickListener(new View.OnClickListener()
        {
            @Override
            public void onClick(View v)
            {
                onItemClickOfAdapter.onItemClick(1, position);
            }
        });
        holder.imgComment.setOnClickListener(new View.OnClickListener()
        {
            @Override
            public void onClick(View v)
            {
                onItemClickOfAdapter.onItemClick(3, position);
            }
        });
        if (media.type.equals(FILETYPE_FOLDER))
        {

            holder.imageFolder.setVisibility(View.VISIBLE);
        }
        else
        {
            holder.imageFolder.setVisibility(View.GONE);
        }
        switch (media.type)
        {
            case FILETYPE_FOLDER:
                holder.imageMediaTypeIcon.setImageResource(R.drawable.ic_folder_icon);
                break;
            case FILETYPE_PDF:
                holder.imageMediaTypeIcon.setImageResource(R.drawable.ic_pdf);
                break;
            case FILETYPE_IMAGE:
                holder.imageMediaTypeIcon.setImageResource(R.drawable.ic_image);
                break;
            case FILETYPE_VIDEO:
            case FILETYPE_VIDEO_MP4:
                holder.imageMediaTypeIcon.setImageResource(R.drawable.ic_video);
                break;
            default:
                String[] contentType = media.type.split("/");
                if (contentType[0].equals(FILETYPE_IMAGE))
                    holder.imageMediaTypeIcon.setImageResource(R.drawable.ic_image);
                else
                    holder.imageMediaTypeIcon.setImageResource(R.drawable.ic_file_icon);
                break;
        }
        if (!media.type.equals(FILETYPE_FOLDER))
        {
            if (media.isDownloading == 1)
            {
                holder.downloadProgressBar.setVisibility(View.VISIBLE);
                holder.img_download.setVisibility(View.GONE);
            }
            else if (media.isDownloaded == 0)
            {
                holder.downloadProgressBar.setVisibility(View.GONE);
                holder.img_download.setImageResource(R.drawable.ic_download_icon);
                holder.img_download.setVisibility(View.VISIBLE);
            }
            else if (media.isDownloaded == 1)
            {
                holder.downloadProgressBar.setVisibility(View.GONE);
                holder.img_download.setVisibility(View.GONE);
            }

        }
        else
        {
            holder.downloadProgressBar.setVisibility(View.GONE);
            holder.img_download.setVisibility(View.GONE);
        }
        if (clickListener != null)
        {
            View.OnClickListener onClickListener = new View.OnClickListener()
            {
                @Override
                public void onClick(View view)
                {
                    if (media.type.equals(FILETYPE_FOLDER))
                    {
                        try
                        {
                            clickListener.onItemClick(finalPosition, view);

                        }
                        catch (ParseException e)
                        {
                            e.printStackTrace();
                        }

                    }
                    else
                    {

                        switch (view.getId())
                        {
                            case R.id.compoundButtonDetail:
                                try
                                {
                                    clickListener.onItemClick(finalPosition, view);

                                }
                                catch (ParseException e)
                                {
                                    e.printStackTrace();
                                }
                                break;

                            case R.id.framelayout_media_thumbnail:

                                if (media.isDownloaded == 1)
                                {
                                    Helper.openFileForImageViewer(activity, media, mediaList);
                                }
                                else
                                {
                                    long mediaSize = mediaList.get(position).size;
                                    if (mediaSize > Helper.availableBlocks(activity))
                                    {
                                        showNoFreeSpaceAvailableDialog(activity);
                                        break;
                                    }
                                    try
                                    {
                                        onNetworkReady(mediaList.get(position));
                                    }
                                    catch (ParseException e)
                                    {
                                        e.printStackTrace();
                                    }
                                    catch (JSONException e)
                                    {
                                        e.printStackTrace();
                                    }
                                    catch (UnsupportedEncodingException e)
                                    {
                                        e.printStackTrace();
                                    }
                                }
                                break;

                            /*case R.id.linearpopup:
                                if (media.isDownloaded == 1)
                                {
                                    Helper.openFile(activity, media);
                                }
                                break;
*/
                        }
                    }

                }
            };


            if (media != null)

            {
                if (media.type.equals(FILETYPE_FOLDER))
                {
                    holder.textFileSize.setVisibility(View.GONE);
                    holder.compoundButtonDetail.setVisibility(View.GONE);
                    holder.img_download.setVisibility(View.GONE);
                }
                if (media.type.equals(FILETYPE_FOLDER) && media.icon != null)
                {

                    final Uri imageUri = Uri.parse(media.icon);
                    Glide.with(activity)
                            .load(imageUri)
                            .asBitmap()
                            .placeholder(R.drawable.ic_loding)
                            .diskCacheStrategy(DiskCacheStrategy.ALL)
                            .into(new SimpleTarget<Bitmap>()
                            {
                                @Override
                                public void onResourceReady(Bitmap bitmap, GlideAnimation<? super Bitmap> glideAnimation)
                                {
                                    holder.imageIcon.setImageBitmap(bitmap);
                                }

                                @Override
                                public void onLoadFailed(Exception e, Drawable errorDrawable)
                                {
                                    super.onLoadFailed(e, errorDrawable);
                                    Glide.with(activity)
                                            .load(imageUri)
                                            .asBitmap()
                                            .placeholder(R.drawable.ic_loding)
                                            .error(R.drawable.ic_folder_icon)
                                            .diskCacheStrategy(DiskCacheStrategy.ALL)
                                            .into(new SimpleTarget<Bitmap>()
                                            {
                                                @Override
                                                public void onResourceReady(Bitmap bitmap, GlideAnimation<? super Bitmap> glideAnimation)
                                                {
                                                    holder.imageIcon.setImageBitmap(bitmap);
                                                }

                                                @Override
                                                public void onLoadFailed(Exception e, Drawable errorDrawable)
                                                {
                                                    super.onLoadFailed(e, errorDrawable);
                                                    //Log.v("Glide", e.getMessage());
                                                }
                                            });
                                }
                            });

                }
                else if (media.type.equals(FILETYPE_PDF))
                {
                    final Uri imageUri = Uri.parse(media.icon);
                    Glide.with(activity)
                            .load(imageUri)
                            .placeholder(R.drawable.ic_loding)
                            .diskCacheStrategy(DiskCacheStrategy.ALL)
                            .into(holder.imageIcon);
                }
                else if (media.type.equalsIgnoreCase(FILETYPE_VIDEO) || media.type.equalsIgnoreCase(FILETYPE_VIDEO_MP4))
                {
                    final Uri videoUri = Uri.parse(activity.getFilesDir() + File.separator + media.id);
                    final Uri imageUri = Uri.parse(media.icon);
                    Glide.with(activity)
                            .load(imageUri)
                            .placeholder(R.drawable.ic_loding)
                            .diskCacheStrategy(DiskCacheStrategy.ALL)
                            .into(holder.imageIcon);
                }
                else
                {
                    String[] contentType = media.type.split("/");
                    if (contentType[0].equals(FILETYPE_IMAGE))
                    {
                        if (media.isDownloaded == 1)
                        {
                            final Uri imageUri = Uri.parse(activity.getFilesDir() + File.separator + media.id);
                            Glide.with(activity)
                                    .load(media.icon)
                                    .asBitmap()
                                    .placeholder(R.drawable.ic_loding)
                                    .diskCacheStrategy(DiskCacheStrategy.ALL)
                                    .into(new SimpleTarget<Bitmap>()
                                    {
                                        @Override
                                        public void onResourceReady(Bitmap bitmap, GlideAnimation<? super Bitmap> glideAnimation)
                                        {
                                            holder.imageIcon.setImageBitmap(bitmap);
                                        }

                                        @Override
                                        public void onLoadFailed(Exception e, Drawable errorDrawable)
                                        {
                                            super.onLoadFailed(e, errorDrawable);
                                            Glide.with(activity)
                                                    .load(new File(String.valueOf(imageUri)))
                                                    .asBitmap()
                                                    .placeholder(R.drawable.ic_loding)
                                                    .error(R.drawable.ic_channel)
                                                    .diskCacheStrategy(DiskCacheStrategy.ALL)
                                                    .into(new SimpleTarget<Bitmap>()
                                                    {
                                                        @Override
                                                        public void onResourceReady(Bitmap bitmap, GlideAnimation<? super Bitmap> glideAnimation)
                                                        {
                                                            holder.imageIcon.setImageBitmap(bitmap);
                                                        }

                                                        @Override
                                                        public void onLoadFailed(Exception e, Drawable errorDrawable)
                                                        {
                                                            super.onLoadFailed(e, errorDrawable);
                                                            Log.v("Glide", e.getMessage());
                                                        }
                                                    });
                                        }
                                    });

                        }
                        else
                        {
                            final Uri imageUri = Uri.parse(media.icon);
                            Glide.with(activity)
                                    .load(imageUri)
                                    .placeholder(R.drawable.ic_loding)
                                    .diskCacheStrategy(DiskCacheStrategy.ALL)
                                    .into(holder.imageIcon);
                        }
                    }
                    else
                    {
                        final Uri imageUri = Uri.parse(media.icon);
                        Glide.with(activity)
                                .load(imageUri)
                                .placeholder(R.drawable.ic_loding)
                                .diskCacheStrategy(DiskCacheStrategy.ALL)
                                .into(holder.imageIcon);
                    }
                }
            }

            holder.itemView.setOnClickListener(onClickListener);
            holder.compoundButtonDetail.setOnClickListener(onClickListener);
            holder.frameLayout_media_thumbnail.setOnClickListener(onClickListener);
            holder.linearPopup.setOnClickListener(onClickListener);
        }

    }

    private void showNoFreeSpaceAvailableDialog(Context context)
    {
        AlertDialog alertDialog = new AlertDialog.Builder(context).create();
        alertDialog.setTitle(context.getString(R.string.app_title));
        alertDialog.setMessage(context.getString(R.string.no_available_space_message));
        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, context.getString(R.string.ok),
                new DialogInterface.OnClickListener()
                {
                    public void onClick(DialogInterface dialog, int which)
                    {
                        dialog.dismiss();


                    }
                });
        alertDialog.show();

    }

    private void onNetworkReady(final Media media1) throws ParseException, JSONException, UnsupportedEncodingException
    {
        NetworkRequest request;
        ArrayList<RequestParameter> parameters = new ArrayList<>();
        JSONObject payloadJson = new JSONObject();

        payloadJson.put("ChannelId", String.valueOf(DataHelper.getChannelId(activity, media1.id)));
        payloadJson.put("UserId", String.valueOf(PreferenceHelper.getUserContext(activity)));
        payloadJson.put("MediaId", String.valueOf(media1.id));
        payloadJson.put("VersionId", String.valueOf(media1.currentVersionId));

        NetworkService.RequestCompleteCallback callback;
        JSONObject requestJson = new JSONObject();
        requestJson.put("Action", DataProvider.Actions.GET_CHANNEL_MEDIA_CONTENT);
        requestJson.put("Payload", payloadJson);
        Log.e("JSON", requestJson.toString());
        request = new NetworkRequest(activity);
        request.setBodyType(NetworkRequest.REQUEST_BODY_MULTIPART);
        request.setRequestType(NetworkRequest.REQUEST_TYPE_NORMAL);

        request.setRequestListener(new NetworkRequest.RequestListener()
        {
            @Override
            public void onRequestComplete(NetworkResponse networkResponse) throws JSONException
            {
                if (networkResponse.getStatusCode() == 200)
                {
                    JSONObject response = new JSONObject(networkResponse.getResponse());

                    if (response.optInt("Status") > 0)
                    {
                        if (response.optInt("Status") == 2113) // Status = 2113 means "USER_TOKEN_NOT_VALID"
                        {
                            NetworkRequest requestTokenNotValid = new NetworkRequest(activity);
                            requestTokenNotValid.setBodyType(NetworkRequest.REQUEST_BODY_MULTIPART);
                            requestTokenNotValid.setRequestType(NetworkRequest.REQUEST_TYPE_NORMAL);
                            requestTokenNotValid.setRequestUrl(DataProvider.ENDPOINT_UPDATE_TOKEN);
                            //headerNameValuePairs.add(new BasicNameValuePair(KEY_LANGUAGE_HEADER_PARAM, Locale.getDefault().getLanguage()));
                            try
                            {
                                if (PreferenceHelper.getUserContext(activity) != -1)
                                {
                                    int userId = PreferenceHelper.getUserContext(activity);
                                    String token = PreferenceHelper.getToken(activity) + String.valueOf(userId).length() + userId + Helper.getEpochTime();
                                    ArrayList<BasicNameValuePair> headerNameValuePairs1 = new ArrayList<>();
                                    if (token != null && !token.isEmpty())
                                    {
                                        headerNameValuePairs1.add(new BasicNameValuePair(KEY_AUTHORIZATION, token));
                                        requestTokenNotValid.setHeaders(headerNameValuePairs1);
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                ex.printStackTrace();
                            }
                            requestTokenNotValid.execute();
                            requestTokenNotValid.setRequestListener(new NetworkRequest.RequestListener()
                            {
                                @Override
                                public void onRequestComplete(NetworkResponse networkResponse)
                                {
                                    try
                                    {
                                        JSONObject objUpdateTokenResponse = new JSONObject(networkResponse.getResponse().toString());
                                        if (objUpdateTokenResponse.optInt("Status") > 0)
                                        {
                                            Toast.makeText(activity, objUpdateTokenResponse.optString("Message"), Toast.LENGTH_SHORT).show();
                                        }
                                        else
                                        {
                                            if (objUpdateTokenResponse.has("Payload"))
                                            {
                                                JSONObject objUpdateTokenPayload = objUpdateTokenResponse.getJSONObject("Payload");
                                                if (objUpdateTokenPayload.has("AccessToken") && !objUpdateTokenPayload.isNull("AccessToken"))
                                                {
                                                    PreferenceHelper.storeToken(activity, objUpdateTokenPayload.optString("AccessToken"));
                                                    onNetworkReady(media1);
                                                }
                                            }
                                        }
                                    }
                                    catch (Exception e)
                                    {
                                        e.printStackTrace();
                                    }
                                }
                            });
                        }
                        // Toast.makeText(activity, response.optString("Message"), Toast.LENGTH_LONG).show();
                    }
                    else
                    {
                        /* open new screen to show download process and then go to forward*/

                        ShowdownloadProcessFragment fragment = new ShowdownloadProcessFragment();
                        Bundle arguments = new Bundle();
                        arguments.putString("url", response.optString("Payload"));
                        arguments.putParcelable(MediaFragment.EXTRA_MEDIA, media1);
                        Gson gson = new Gson();
                        String strMediaList = gson.toJson(mediaList);
                        arguments.putString("media_list", strMediaList);
                        fragment.setArguments(arguments);
                        transaction.replace(R.id.layoutDynamicFrame, fragment, fragment.getClass().getSimpleName());
                        transaction.addToBackStack(fragment.getClass().getSimpleName());
                        transaction.commit();

                        /*dialog.setMessage(activity.getString(R.string.menu_download_option_download));
                        dialog.show();
                        media1.isDownloading = 1;
                        DownloadFileFromURL downloadContent = new DownloadFileFromURL(activity, media1, interfaceResponse);
                        downloadContent.execute(response.optString("Payload"));*/

                    }
                }
            }
        });
        request.setProgressMode(NetworkRequest.PROGRESS_MODE_DIALOG_SPINNER);
        request.setProgressMessage("Please wait..");
        request.setRequestUrl(DataProvider.ENDPOINT_FILE);
        parameters = new ArrayList<>();
        parameters.add(RequestParameter.multiPart("Request", requestJson.toString()));
        request.setParameters(parameters);
        int userId = PreferenceHelper.getUserContext(activity);
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeZone(TimeZone.getTimeZone("UTC"));

        String token = PreferenceHelper.getToken(activity) + String.valueOf(userId).length() + userId + Helper.getEpochTime();
        if (token != null && !token.isEmpty())
        {
            ArrayList<BasicNameValuePair> headerNameValuePairs = new ArrayList<>();
            headerNameValuePairs.add(new BasicNameValuePair(KEY_AUTHORIZATION, token));
            request.setHeaders(headerNameValuePairs);
        }
        request.execute();


    }

    @Override
    public int getItemCount()
    {
        return mediaList.size();
    }

    @Override
    public void processFinish(String output)
    {
        if (dialog != null && dialog.isShowing())
            dialog.dismiss();
        notifyDataSetChanged();

    }

    @Override
    public void onClick(View v)
    {

    }

    public interface InterfaceClickMedial
    {

        void onItemClicked();
    }

    /*@Override
    public void donwloadDone() {
        notifyDataSetChanged();
    }*/

    public interface OnClickListener
    {
        public void onItemClick(int position, View view) throws ParseException;
    }

    public interface OnItemClickOfAdapter
    {
        void onItemClick(int pos, int itemPos);
    }

    class MediaHolder extends RecyclerView.ViewHolder
    {
        LinearLayout layout_parent_border;
        FrameLayout frameLayout_media_thumbnail;
        LinearLayout linearPopup;
        ImageView imageIcon, imageFolder;
        TextView textFileSize, txtMediaCount;
        ImageView imageMediaTypeIcon;
        TextView labelName;
        ImageView img_download;
        ProgressBar downloadProgressBar;
        ImageView compoundButtonDetail;
        LinearLayout relativeOption, linearMediaCount;
        ImageView imgRate, imgComment, imgShare, imgInfo;

        @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
        public MediaHolder(View itemView)
        {
            super(itemView);
            itemView.setId(R.id.itemView);
            layout_parent_border = (LinearLayout) itemView.findViewById(R.id.layout_parent_border);
            frameLayout_media_thumbnail = (FrameLayout) itemView.findViewById(R.id.framelayout_media_thumbnail);
            linearPopup = (LinearLayout) itemView.findViewById(R.id.linearpopup);
            imageIcon = (ImageView) itemView.findViewById(R.id.imageIcon);
            imageFolder = (ImageView) itemView.findViewById(R.id.ic_folder);
            textFileSize = (TextView) itemView.findViewById(R.id.textFileSize);
            relativeOption = (LinearLayout) itemView.findViewById(R.id.relative_option);
            linearMediaCount = (LinearLayout) itemView.findViewById(R.id.linear_mediacount);
            imageMediaTypeIcon = (ImageView) itemView.findViewById(R.id.imageMediaTypeIcon);
            img_download = (ImageView) itemView.findViewById(R.id.img_download);
            downloadProgressBar = (ProgressBar) itemView.findViewById(R.id.downloadProgressBar);
            labelName = (TextView) itemView.findViewById(R.id.labelName);
            compoundButtonDetail = (ImageView) itemView.findViewById(R.id.compoundButtonDetail);
            txtMediaCount = (TextView) itemView.findViewById(R.id.textview_mediaCount);

            imgRate = (ImageView) itemView.findViewById(R.id.img_rate);
            imgComment = (ImageView) itemView.findViewById(R.id.img_comment);
            imgInfo = (ImageView) itemView.findViewById(R.id.img_info);
            imgShare = (ImageView) itemView.findViewById(R.id.img_attach);

            imageIcon.setClipToOutline(true);
        }
    }
}
