package in.ssoft.salescloud.base;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.graphics.Typeface;
import android.os.Bundle;
import android.os.IBinder;
import android.support.design.widget.Snackbar;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.View;

import in.ssoft.salescloud.R;

/**
 * Base class of all Activities which use into project
 */

@SuppressWarnings("unused")
public class Activity extends AppCompatActivity
{
    public static Typeface robotoLightTypeface;
    protected static ActionBar actionBar;
    protected View parentLayout;
    protected Toolbar toolbar;
    protected Context context;
    protected NetworkService.NetworkBinder networkBinder;
    protected FragmentManager fragmentManager;
    private Intent networkServiceIntent;
    private ServiceConnection networkConnection;
    private NetworkService.RequestCompleteCallback networkCallback;

    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        robotoLightTypeface = Typeface.createFromAsset(getAssets(), "RobotoLight.ttf");

        fragmentManager = getSupportFragmentManager();
        context = this;
    }

    @Override
    protected void onStart()
    {
        super.onStart();
        bindService(networkServiceIntent, networkConnection, BIND_IMPORTANT);
    }

    @Override
    protected void onStop()
    {
        super.onStop();
        unbindService(networkConnection);
    }

    protected final void setupToolBar()
    {
        toolbar = (Toolbar) findViewById(R.id.navigationBar);
        if (toolbar != null)
        {
            setSupportActionBar(toolbar);
            actionBar = getSupportActionBar();
            if (actionBar != null)
            {
                actionBar.setHomeButtonEnabled(true);
                actionBar.setDisplayShowHomeEnabled(true);
                actionBar.setDisplayHomeAsUpEnabled(true);

            }
        }
    }

    protected final void refreshLayoutTypeface()
    {
        Helper.setupTypeface(getWindow().getDecorView(), robotoLightTypeface);

    }

    @Override
    public final void setContentView(int layoutResID)
    {
        super.setContentView(layoutResID);
        parentLayout = findViewById(R.id.parentLayout);
        setupToolBar();
        initializeComponents();
        bindEvents();
        refreshLayoutTypeface();
    }

    protected void initializeComponents()
    {
        networkServiceIntent = new Intent(context, NetworkService.class);
        networkConnection = new ServiceConnection()
        {
            @Override
            public void onServiceConnected(ComponentName name, IBinder binder)
            {
                networkBinder = (NetworkService.NetworkBinder) binder;
                onNetworkReady();
            }

            @Override
            public void onServiceDisconnected(ComponentName name)
            {
                networkBinder = null;
            }
        };
    }

    protected void bindEvents()
    {
        networkCallback = new NetworkService.RequestCompleteCallback()
        {
            @Override
            public void onRequestComplete(int requestCode, boolean status, String payload)
            {
                onNetworkResponse(requestCode, status, payload);
            }
        };
    }

    public final void notifySimple(String message)
    {
        if (parentLayout != null)
            Snackbar.make(parentLayout, message, Snackbar.LENGTH_LONG).show();
        else
            Snackbar.make(findViewById(android.R.id.content), message, Snackbar.LENGTH_LONG).show();
    }

    public void postNetworkRequest(int requestCode, String url, String action, RequestParameter... requestParameters)
    {
        if (networkBinder != null)
        {
            networkBinder.postWrappedJSONRequest(this, requestCode, url, action, networkCallback, requestParameters);
        }
    }

    /*protected void navigateToFragment(int containerId, Fragment fragment)
    {
        navigateToFragment(containerId, fragment, true);
    }*/

    protected void navigateToFragment(int containerId, Fragment fragment, boolean addToBackStack)
    {
        FragmentTransaction transaction = fragmentManager.beginTransaction();
        transaction.replace(containerId, fragment, fragment.getClass().getSimpleName());
        if (addToBackStack)
            transaction.addToBackStack(fragment.getClass().getSimpleName());
        transaction.commit();
    }

    protected void onNetworkReady()
    {

    }

    protected void onNetworkResponse(int requestCode, boolean status, String response)
    {

    }


}